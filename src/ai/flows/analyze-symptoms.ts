// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Analyzes user-provided symptoms and returns a description of potential health problems.
 *
 * - analyzeSymptoms - A function that takes symptom descriptions and returns potential conditions.
 * - AnalyzeSymptomsInput - The input type for the analyzeSymptoms function.
 * - AnalyzeSymptomsOutput - The return type for the analyzeSymptoms function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeSymptomsInputSchema = z.object({
  symptoms: z
    .string()
    .describe('A detailed description of the symptoms experienced by the user.'),
});
export type AnalyzeSymptomsInput = z.infer<typeof AnalyzeSymptomsInputSchema>;

const AnalyzeSymptomsOutputSchema = z.object({
  analysis: z
    .string()
    .describe(
      'A clear, concise description of potential health problems based on the symptoms provided.'
    ),
  severity: z
    .string()
    .describe(
      'An assessment of the severity of the potential health problems (e.g., mild, moderate, severe).'
    ),
});
export type AnalyzeSymptomsOutput = z.infer<typeof AnalyzeSymptomsOutputSchema>;

export async function analyzeSymptoms(input: AnalyzeSymptomsInput): Promise<AnalyzeSymptomsOutput> {
  return analyzeSymptomsFlow(input);
}

const analyzeSymptomsPrompt = ai.definePrompt({
  name: 'analyzeSymptomsPrompt',
  input: {schema: AnalyzeSymptomsInputSchema},
  output: {schema: AnalyzeSymptomsOutputSchema},
  prompt: `You are a medical expert specializing in symptom analysis.

You will receive a description of symptoms and provide a clear and concise analysis of potential health problems, along with an assessment of the severity.

Symptoms: {{{symptoms}}}

Analysis (potential health problems and severity assessment):`,
});

const analyzeSymptomsFlow = ai.defineFlow(
  {
    name: 'analyzeSymptomsFlow',
    inputSchema: AnalyzeSymptomsInputSchema,
    outputSchema: AnalyzeSymptomsOutputSchema,
  },
  async input => {
    const {output} = await analyzeSymptomsPrompt(input);
    return output!;
  }
);
